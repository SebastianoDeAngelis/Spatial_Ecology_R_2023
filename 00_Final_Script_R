# Final summary and scripts including all contents dealt with in the course

#-----------------------------------

# Summary:
# 01_beginning
# 02.1_population_Density
# 02.2_Population_Distribution
# 03.1_Community_Multivariate_Analysis
# 03.2_Community_Overlap
# 04_Remote_Sensin_Visualization
# 05_Spectral_Indices
# 06_Time_Series_Analysis
# 07_Copernicus
# 08_External_Data
# 09_Classification
# 10_LaTeX
# 11_Variability

#-----------------------------------

# 01_Beginning

# ashtags are made for comments!! # it is extremely important to always comment on the side of each operation!

# really dont be shy, just comment a lot

# usin R just as a calculator and object name assignment

a <- 2+3*2+(7/8)

seba <- 5+4*2-12.5

final <-- seba*a

final^2

#make an array with data

Plas <- c(10, 20, 30, 50, 70) # number of microplastic found in a finnite area

People <- c(100, 500, 600, 1000, 2000) # number of people found in the determinate area

plot (People, Plas, xlab="number of people", ylab="microplastics)

#this makes it possible to add labels to graphs dimensions

#add point characters to graphs

plot (People, Plas, xlab="number of people", ylab="microplastics", pch=16, cex=0.4, col=blue)

# "pch" (point character) is for the shape, "cex" is for the size of dots in the plot, and "col" is for color

#-----------------------------------

# 02_Population_Density

#### Populations: group of Individuals all attaining to the same species
#### Density number of individuals per unit area of a species, usually is an interplay between phonomenon that add individuals (birth, immigration) combined with individual removal (death or emigration)
#### Dispersion is the pattern of spacing among individuals within the boundaries of a population
#### Patterns of dispersion within a population can be: clumped, uniform, or randomic
#### Demography is the study of dynamics in a population, its individual's vital statistics (check for survivorship curve)
#### Carrying capacity is the amount of individuals of a population or species that can be sustained by the resources in the environmente
#### r species: selected for life cycle traits that maximie reproduction
#### K species: selected for life cycle traits that are related to higher competition
#### Metapopulations are groups of populations linked by immigration and emigration
#### Estimates on carrying capacity of humans on Earth tells is 10-15 billion
####
#install.packages("spatstat")
library(spatstat)

bei
plot(bei, pch=19, cex=.5) #setting size and shape of the points in the map

# density map building: from points to a countinous surface
density_map <- density(bei)
plot(density_map)  ##setting the colours

# adding points on top of the image generated
points(bei, cex = .3)
##setting the colours
colour <- colorRampPalette(c("black", "red", "orange", "yellow", "white"))(100)
plot(density_map, col=colour)

##building our own color palette
colour2 <- colorRampPalette(c("darkolivegreen", "darkolivegreen3", "yellowgreen", "yellow", "azure" ))(100)

# more data from beiextra
plot(bei.extra)
elev <- bei.extra[[1]]
plot(elev)

#plotting both elevation and density; or any other variable alltogether: multiframe
# mf = multiframe
par(mfrow = c(1,2))
plot(densitymap)
plot(elev)

par(mfrow = c(2,1))
plot(densitymap)
plot(elev)

par(mfrow = c(1,3))
plot(density_map, col = colour2)
plot(elev, col = colour2)
plot(bei)

#-----------------------------------

# 02.2_Population_Dtistribution

## install.packages("sdm", "terra") -which are predictors-
#sdm: species distribution model
#### why populations disperse over the landscape? and how?

library(sdm)
library(terra

file <- system.file("external/species.shp", package="sdm")

Rana_alpina <- vect(file)

# occurrence data only talks about only the occurrence of a species, not its abundance

Rana_alpina$Occurrence  

plot(Rana_alpina)

# Selecting the presence 


#### selecting presences
presence <- Rana_alpina[Rana_alpina$Occurrence == 1]
presence
presence$Occurrence

#### selecting absences

absence <- Rana_alpina[Rana_alpina$Occurrence == 0]
absence
absence$Occurrence

#plotting presences and absences in a multiframe

par(mfrow=c(1,2))
plot(presence, cex = .5)
plot(absence, cex = .5)
      # closing a multiframe
dev.off()

# plotting pres and abse alltogether with different colours
dev.off()
plot(presence, cex = .5, col="navy")
points(absence, cex = .5, col="azure3")  #adding other points to an already existing plot. insted of using the function plot we use the points function so the data in the plot are not rewritten


### using environment predictors for the occurrence distribution
    ## using the "path" object to find the path for an external file
elev <- system.file("external/elevation.asc", package="sdm") 
 ### in order to plot a raster graph in this case we are plotting an image so we need to use a function called "rast()"
elevmap <- rast(elev)
plot(elevmap, col=colour)
points(presence, col = "green3", cex = .6)

### using OTHER ENVIRONMENTAL PREDICTORS and creating a multiframe with all of them

temp <- system.file("external/temperature.asc", package="sdm") 
prec <- system.file("external/precipitation.asc", package="sdm") 
vege <- system.file("external/vegetation.asc", package="sdm") 
par(mfrow = c(2,2))
tempmap <- rast(temp)
precmap <- rast(prec)
vegemap <- rast(vege)

plot(tempmap, col =colour)
points(presence, col = "green3", cex = .6)
plot(precmap, col = colour)
points(presence, col = "green3", cex = .6)
plot(vegemap, col = colour)
points(presence, col = "green3", cex = .6)
plot(elevmap, col=colour)
points(presence, col = "green3", cex = .6)

#-----------------------------------

# 03.1_Community_Multivariate_Analysis

#-----------------------------------

# 03.2_Community_Overlap

#-----------------------------------

# 04_Remote_Sensing_Visualization

# Remote sensing for ecosystem monitoring

# The devtools package is useful to downlad packages from external sources, like github
install.packages("devtools")
install.packages("terra")

library(devtools)
library(terra)

devtools::install_github("ducciorocchini/imageRy")

library(imageRy)

##list the data from ImageRy with "im.list()"
im.list()

b2 <- im.import("sentinel.dolomites.b2.tif")

b2

clb <- colorRampPalette(c("darkgrey","grey","lightgrey","lightgrey3")) (100)
plot(b2, col=clb)

# WGS: World Geodetic System
# coordynate system's EPSG is a code use by oil company to tag reference systems
# earth's surface isn't like the one of a geometrical sphere so  you nee other shapes to approximate it. a geoid is a 3d shape which surface is always perpendicular to the gravitational force which is difficult to estimate,
# an ellipsoide is a 3d ellipse. for many places you dont find an ellipsoid perfectly coinciding with the geoid we have different ellipsoids virtually built atop of earth's surface to better estimate earth's surface in a definite reference system


######## final exercise 
# import the green band from sentinel-2 (band 3)
im.list()
b3 <- im.import("sentinel.dolomites.b3.tif")
clb <- colorRampPalette(c("darkgrey","grey","lightgrey","lightgrey3")) (100)
plot(b3, col=clb)

#stack images
stacksent <- c(b2, b3, b4, b8)
stacksent

#how to close all devices (it closes any graphics)
dev.off()

plot(stacksent, col = cl5)
plot(stacksent[[4]], col=cl5)

plot(stacksent)
im.plotRGB(stacksent, r=3, g=2, b=1)

#Excercise: plot in a multiframe the bands with different color ramps
dev.off()
par(mfrow=c(2,2))
clblue <- colorRampPalette(c("navy","blue","lightblue", "azure")) (100)
plot(b2, col=clblue)
clgreen <- colorRampPalette(c("darkgreen","green3", "lightgreen")) (100)
plot(b3, col= clgreen)
clred <- colorRampPalette(c("darkred", "red", "pink"))(100)
plot(b4, col= clred)
clNIR <- colorRampPalette(c("brown3","orange3", "yellow3"))(100)
plot(b8, col = clNIR)

#                              07/11/2023

# RGB space
# stacksent: 
# band2 blue element 1, stacksent[[1]] 
# band3 green element 2, stacksent[[2]]
# band4 red element 3, stacksent[[3]]
# band8 nir element 4, stacksent[[4]] 

b2 <- im.import("sentinel.dolomites.b2.tif")
b3 <- im.import("sentinel.dolomites.b3.tif")
b4 <- im.import("sentinel.dolomites.b4.tif")
b8 <- im.import("sentinel.dolomites.b8.tif")
im.plotRGB(stacksent, r=3, g=2, b=1)

# we can now change the visualized color choosing between the position within the stacksent array
# in this case the band which gives more information about vegetation in INR, so we change the color visualizing that
im.plotRGB(stacksent, r=4, g=2, b=1)

# further doing so
im.plotRGB(stacksent, r=3, g=4, b=1)
im.plotRGB(stacksent, r=3, g=2, b=4)

#how to see the correlation of information between bands. we can plot the information corresponding to the same pixel in different bands through the function:
pairs(stacksent)
#very fast correlation method working with any  kind of data, not only geographical #ANCIENT, PIONEERING FUNTION

#-----------------------------------

05_Spectral_Indices

# vegetation indices
# NDVI = N DIFFERTIAL VEGETATIONAL INDEX

m1992 <- im.import("matogrosso_l5_1992219_lrg.jpg")
# bands: 1=NIR, 2=RED, 3=GREEN
im.plotRGB(m1992, r=1 , g=2 , b=3) # the same as
im.plotRGB(m1992, 1 , 2 , 3)

#we can now put infrared in green visualization component or any other
im.plotRGB(m1992, 2 , 1 , 3)

#import the matogrosso image from 2006
m2006 <- im.import("matogrosso_ast_2006209_lrg.jpg")
im.plotRGB(m2006, 2 , 3 , 1)

### 09/11/2023
# Indices derived from RS imagery

library(imageRy)
library(terra)
library(ggplot2)
library(viridis)

im.list()

m1992 <- im.import("matogrosso_l5_1992219_lrg.jpg")
im.plotRGB(m1992, r=2, g=1, b=3) #NIR layer [1] displayed green
im.plotRGB(m1992, r=2, g=3, b=1) #NIR layer [1] displayed blue

#building a multiframe for both the previously assigned images from matogrosoo 1992/2006
par(mfrow=c(2,1))
im.plotRGB(m1992, r=2, g=3, b=1)
im.plotRGB(m2006, r=2, g=3, b=1)

# creating indices regarding vegetation health through raster analysis
      ## plot(m1992[[1]]) function to plot only the NIR band. it's flux values goes from 0 to 265 bc these are images stored in 8 bit, so 265 possible multiple combination
# in order to do so le's compute the difference between the NIR value obtained in 1992 and the red value from the same year
# DVI = NIR - RED
dvi1992 <- m1992[[1]] - m1992[[2]]
plot(dvi1992) #then plot it

# making it fancy
cl <- ColorRampPalette(c("black", "darkblue", "azure", "yellow", "lightgreen", "darkgreen"))
par(mfrow=c(1,2))
plot(dvi1992, col=cl)
plot(dvi2006, col=cl)

# values must be normalized so that any value detected is comparable
# NDVI works perfectly for this beacause it ranges from -1 to +1
NDVI1992 <- (m1992[[1]] - m1992[[2]])/(m1992[[1]] + m1992[[2]])
NDVI2006 <- (dvi2006)/(m2006[[1]] + m2006[[2]])

par(mfrow=c(1,2))
plot(NDVI1992, col=cl)
plot(NDVI2006, col=cl)

# speeding up calculations
ndvi2006 <- im.ndvi(m2006, 1, 2)

#-----------------------------------

06_Time_Series_Analysis

#Time series analysis

library(Imagery)
library(terra)

#Downloading data
im.list()
EN_01 <- im.import("EN_01.png")
EN_13 <- im.import("EN_13.png")

par(mfrow=c(2,1))
im.plot.RGB.auto(EN_01)
im.plot.RGB.auto(EN_13)

# using the first band of images
dif <- EN01[[1]] - EN_13[[1]]

#changing palette (from red to blue) and plotting the difference between the two images
cldiff <- colorRampPalette(c("blue","white","red"))(100)
plot(dif, col=cldiff)

# import other data
green2000 <- im.import("greenland.2000.tif")
cldiff <- colorRampPalette(c("blue","white","red"))(100)

#again
G2005 <- im.import("greenland.2005.tif")
G2010 <- im.import("greenland.2010.tif")
G2015 <- im.import("greenland.2015.tif")

#putting the imported data in an array as bands of the new stacked file
stackG <- c(green2000, G2005, G2010, G2015)
plot(stackG, col = cldiff)

#Exercise: compute the difference between the first and last file in the stack
dif.1.4 <- stackG[[1]]-stackG[[4]]
#which is the same as <- green2000 - G2015
plot( dif.1.4, col = cldiff)

#Exercise: make a RGB plot using different years
im.plot.RGB(stackG, 1, 2, 3)

#-----------------------------------

# 07_Copernicus

# https://land.copernicus.eu/global/
# downloading images from the website after registering

library(terra)
library(ncdf4)

# establishing a working directory
# setwd("C:/Users/ecc")

# importing a raster image with this function
# downloadmap <- rast("downloaded raster")

#-----------------------------------

# 08_External_Data

# first step: explaining to R which folder we are gonna use (this is called the working directory)
setwd("C:/Users/sebad/OneDrive/OneDrive - Università degli Studi di Milano/Documenti/Unibo Folder/Spatial Ecology/immagini satellitari utili")
# inverting every back slash because R doesnt read them properly

# Import the data using the function rast which creates an image
library(terra)
Najafmay <- rast("najafiraq_may.jpg")
Najafaugust <- rast("najafiraq_august.jpg")

# plotting it
par( mfrow = c(1,2))
plotRGB( Najafmay, 1, 2, 3)
plotRGB( Najafaugust, 1, 2, 3)

#now download any image and work on them 

#-----------------------------------

# 09_Classification

# we can classify each pixel considering its reflectance in different color bands
# to classify we consider the reflectance of NIR values and RED values. Each pixel has a unique value of these two parameters but similar pixels have similar values. and thus we can sub-divide them in classes
# we use training sites to train the software to recognize each pixel and divide it in the corresponding cluster (class)
# in R we can do it thanks to the ImageRy function: im.classify()

# classify satellite images and estimate the amounty of change
library(terra)
library(ImageRy)
im.list()

Sun <- im.import("Solar_Orbiter_s_first_views_of_the_Sun_pillars")
# just by viewing the image is possible to predict how many classes are useful to classify the image

# using the funtion expressing the num of classes
sun_c <- im.classify(sun, num_clusters = 3)
plot(sun_c)

#apply the same method to matogrosso images
im.list()
m1992 <- im.import("matogrosso_l5_1992219_lrg")
m2006 <- im.import("matogrosso_ast_2006209_lrg")

# then we classify m1992 in two classes, so that one class is agricultural area and the other is forested
m1992_c <- im.classify(m1992, num_clusters = 2)

# same as m1992 for m2006
m2006_c <- im.classify(m2006, num_clusters = 2)

# plotting them both 
par(mfrow=c(1,2))
plot(m1992_c[[1]])
plot(m2006_c[[1]])


#obtaining frequncy of each cluster
freq_1992 <- freq(m1992_c)
freq_2006 <- freq(m2006_c)
# extracting the total number of pixel
tot1992 <- ncell(m1992_c)
tot2006 <- ncell(m2006_c)
# obtain the percentage %
p1992 <- f1992 * 100 / tot1992
p2006 <- f2006 * 100 / tot2006

#building the final table
cluster <- c("forest", "human")
y1992 <- c(84, 16)
y2006 <- c(45, 55)

tab_final <- data.frame(cluster, y1992, y2006)
tab_final

# and dysplying it through function of the package GGPLOT 
library(ggplot2)
p1 <- ggplot(tab_final, aes(x=cluster, y=y1992, color=cluster)) + geom_bar(stat="identity", fill="white")

p2 <- ggplot(tab_final, aes(x=cluster, y=y2006, color=cluster)) + geom_bar(stat="identity", fill="white")

#combining the two graphs witha new library
install.packages("patchwork")
library(patchwork)
p1 + p2

#an issue with such view is that the scale is different and can be misunderstood
p1 <- ggplot(tab_final, aes(x=cluster, y=y1992, color=cluster)) + geom_bar(stat="identity", fill="white") + ylim(c(0,100))

p2 <- ggplot(tab_final, aes(x=cluster, y=y2006, color=cluster)) + geom_bar(stat="identity", fill="white") + ylim(c(0,100))

#-----------------------------------

# 10_LaTeX

# writing code dedicated to students mental sanity
## good alternative to Word
+ Formulas
+ Layout: header
+ Figures
+ Bibliography

# every function in LaTeX is preceded by  a backslash '\'
# the arguments in latex are included in graphs parenthesis '{}'
# the '%' is the comment symbol

#-----------------------------------

# 11_Variability


#-----------------------------------
